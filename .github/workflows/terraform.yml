name: Terraform CI/CD

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose the Terraform action to perform"
        required: true
        type: choice
        options:
          - init
          - plan
          - apply
          - all   # Ejecuta init, plan y apply
          - destroy

env:
  TF_VERSION: "1.9.0"
  AWS_REGION: "us-east-1"
  TF_BUCKET: ${{ secrets.TF_BUCKET }}
  TF_DYNAMODB_TABLE: ${{ secrets.TF_DYNAMODB_TABLE }}
  TF_STATE_KEY: "state/terraform.tfstate"

jobs:
  init:
    if: ${{ github.event.inputs.action == 'init' || github.event.inputs.action == 'all' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        working-directory: ./infra/Terraform
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ./infra/Terraform
        run: terraform validate

      - name: Terraform Init
        working-directory: ./infra/Terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_DYNAMODB_TABLE }}" \
            -reconfigure

  plan:
    if: ${{ github.event.inputs.action == 'plan' || github.event.inputs.action == 'all' }}
    needs: init
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ./infra/Terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_DYNAMODB_TABLE }}" \
            -reconfigure

      - name: Terraform Plan
        working-directory: ./infra/Terraform
        run: |
          terraform plan -var-file="terraform.tfvars" -out=tfplan

  apply:
    if: ${{ github.event.inputs.action == 'apply' || github.event.inputs.action == 'all' }}
    needs: plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ./infra/Terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_DYNAMODB_TABLE }}" \
            -reconfigure

      - name: Terraform Plan
        working-directory: ./infra/Terraform
        run: |
          terraform plan -var-file="terraform.tfvars" -out=tfplan

      - name: Terraform Apply
        working-directory: ./infra/Terraform
        run: |
          terraform apply -auto-approve tfplan

  destroy:
    if: ${{ github.event.inputs.action == 'destroy' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ./infra/Terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_DYNAMODB_TABLE }}" \
            -reconfigure

      - name: Terraform Destroy
        working-directory: ./infra/Terraform
        run: |
          terraform destroy -auto-approve -var-file="terraform.tfvars"
